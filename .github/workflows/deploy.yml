name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test:ci
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        JWT_SECRET: test-secret

  # ÊûÑÂª∫ Docker ÈïúÂÉè
  build:
    runs-on: ubuntu-latest
    needs: quality-check
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ÈÉ®ÁΩ≤Âà∞ Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

    - name: Deploy to staging server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/spaceplus
          git pull origin main
          docker-compose -f docker-compose.yml down
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up -d
          
          # Á≠âÂæÖÊúçÂä°ÂêØÂä®
          sleep 30
          
          # ÂÅ•Â∫∑Ê£ÄÊü•
          curl -f http://localhost:3000/api/health || exit 1
        EOF

    - name: Run smoke tests
      run: |
        # Á≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàê
        sleep 60
        
        # Âü∫Êú¨ÂÅ•Â∫∑Ê£ÄÊü•
        curl -f ${{ secrets.STAGING_URL }}/api/health
        
        # Ê£ÄÊü•‰∏ªÈ°µ
        curl -f ${{ secrets.STAGING_URL }}/

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ Staging deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ÈÉ®ÁΩ≤Âà∞ Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Create backup
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/spaceplus
          
          # ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
          BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Â§á‰ªΩÊï∞ÊçÆÂ∫ì
          docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U spaceplus spaceplus > "$BACKUP_DIR/database.sql"
          
          # Â§á‰ªΩ‰∏ä‰º†Êñá‰ª∂
          if [ -d "uploads" ]; then
            cp -r uploads "$BACKUP_DIR/"
          fi
          
          echo "Backup created: $BACKUP_DIR"
        EOF

    - name: Deploy to production server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/spaceplus
          git pull origin main
          
          # ÂÅúÊ≠¢ÊúçÂä°
          docker-compose -f docker-compose.prod.yml down
          
          # ÊãâÂèñÊñ∞ÈïúÂÉè
          docker-compose -f docker-compose.prod.yml pull
          
          # ÂêØÂä®Êï∞ÊçÆÂ∫ì
          docker-compose -f docker-compose.prod.yml up -d postgres redis
          sleep 15
          
          # ËøêË°åÊï∞ÊçÆÂ∫ìËøÅÁßª
          docker-compose -f docker-compose.prod.yml run --rm app npx prisma migrate deploy
          
          # ÂêØÂä®ÊâÄÊúâÊúçÂä°
          docker-compose -f docker-compose.prod.yml up -d
          
          # Á≠âÂæÖÊúçÂä°ÂêØÂä®
          sleep 60
          
          # ÂÅ•Â∫∑Ê£ÄÊü•
          curl -f http://localhost:3000/api/health || exit 1
        EOF

    - name: Run production smoke tests
      run: |
        # Á≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàê
        sleep 120
        
        # Âü∫Êú¨ÂÅ•Â∫∑Ê£ÄÊü•
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health
        
        # Ê£ÄÊü•‰∏ªÈ°µ
        curl -f ${{ secrets.PRODUCTION_URL }}/
        
        # Ê£ÄÊü•ÂÖ≥ÈîÆAPI
        curl -f ${{ secrets.PRODUCTION_URL }}/api/jobs

    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üéâ Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ÂÆâÂÖ®Êâ´Êèè
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'